{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * @license\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE\n */\n\n\nimport { Directive, ElementRef, Input, Renderer2, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n\nvar DataTableDirective =\n/** @class */\nfunction () {\n  function DataTableDirective(el, vcr, renderer) {\n    this.el = el;\n    this.vcr = vcr;\n    this.renderer = renderer;\n    /**\n     * The DataTable option you pass to configure your table.\n     */\n\n    this.dtOptions = {};\n  }\n\n  DataTableDirective.prototype.ngOnInit = function () {\n    var _this = this;\n\n    if (this.dtTrigger) {\n      this.dtTrigger.subscribe(function (options) {\n        _this.displayTable(options);\n      });\n    } else {\n      this.displayTable(null);\n    }\n  };\n\n  DataTableDirective.prototype.ngOnDestroy = function () {\n    if (this.dtTrigger) {\n      this.dtTrigger.unsubscribe();\n    }\n\n    if (this.dt) {\n      this.dt.destroy(true);\n    }\n  };\n\n  DataTableDirective.prototype.displayTable = function (dtOptions) {\n    var _this = this; // assign new options if provided\n\n\n    if (dtOptions) {\n      this.dtOptions = dtOptions;\n    }\n\n    this.dtInstance = new Promise(function (resolve, reject) {\n      Promise.resolve(_this.dtOptions).then(function (resolvedDTOptions) {\n        // validate object\n        var isTableEmpty = Object.keys(resolvedDTOptions).length === 0 && $('tbody tr', _this.el.nativeElement).length === 0;\n\n        if (isTableEmpty) {\n          reject('Both the table and dtOptions cannot be empty');\n          return;\n        } // Using setTimeout as a \"hack\" to be \"part\" of NgZone\n\n\n        setTimeout(function () {\n          // Assign DT properties here\n          var options = {\n            rowCallback: function (row, data, index) {\n              if (resolvedDTOptions.columns) {\n                var columns = resolvedDTOptions.columns;\n\n                _this.applyNgPipeTransform(row, columns);\n\n                _this.applyNgRefTemplate(row, columns, data);\n              } // run user specified row callback if provided.\n\n\n              if (resolvedDTOptions.rowCallback) {\n                resolvedDTOptions.rowCallback(row, data, index);\n              }\n            }\n          }; // merge user's config with ours\n\n          options = Object.assign({}, resolvedDTOptions, options);\n          _this.dt = $(_this.el.nativeElement).DataTable(options);\n          resolve(_this.dt);\n        });\n      });\n    });\n  };\n\n  DataTableDirective.prototype.applyNgPipeTransform = function (row, columns) {\n    // Filter columns with pipe declared\n    var colsWithPipe = columns.filter(function (x) {\n      return x.ngPipeInstance && !x.ngTemplateRef;\n    });\n    colsWithPipe.forEach(function (el) {\n      var pipe = el.ngPipeInstance;\n      var pipeArgs = el.ngPipeArgs || []; // find index of column using `data` attr\n\n      var i = columns.findIndex(function (e) {\n        return e.data === el.data;\n      }); // get <td> element which holds data using index\n\n      var rowFromCol = row.childNodes.item(i); // Transform data with Pipe and PipeArgs\n\n      var rowVal = $(rowFromCol).text();\n      var rowValAfter = pipe.transform.apply(pipe, __spreadArray([rowVal], pipeArgs, false)); // Apply transformed string to <td>\n\n      $(rowFromCol).text(rowValAfter);\n    });\n  };\n\n  DataTableDirective.prototype.applyNgRefTemplate = function (row, columns, data) {\n    var _this = this; // Filter columns using `ngTemplateRef`\n\n\n    var colsWithTemplate = columns.filter(function (x) {\n      return x.ngTemplateRef && !x.ngPipeInstance;\n    });\n    colsWithTemplate.forEach(function (el) {\n      var _a = el.ngTemplateRef,\n          ref = _a.ref,\n          context = _a.context; // get <td> element which holds data using index\n\n      var i = columns.findIndex(function (e) {\n        return e.data === el.data;\n      });\n      var cellFromIndex = row.childNodes.item(i); // reset cell before applying transform\n\n      $(cellFromIndex).html(''); // render onto DOM\n      // finalize context to be sent to user\n\n      var _context = Object.assign({}, context, context === null || context === void 0 ? void 0 : context.userData, {\n        adtData: data\n      });\n\n      var instance = _this.vcr.createEmbeddedView(ref, _context);\n\n      _this.renderer.appendChild(cellFromIndex, instance.rootNodes[0]);\n    });\n  };\n\n  DataTableDirective.ɵfac = function DataTableDirective_Factory(t) {\n    return new (t || DataTableDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  DataTableDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DataTableDirective,\n    selectors: [[\"\", \"datatable\", \"\"]],\n    inputs: {\n      dtOptions: \"dtOptions\",\n      dtTrigger: \"dtTrigger\"\n    }\n  });\n  return DataTableDirective;\n}();\n\nexport { DataTableDirective };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[datatable]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    dtOptions: [{\n      type: Input\n    }],\n    dtTrigger: [{\n      type: Input\n    }]\n  });\n})();","map":{"version":3,"sources":["D:/StockMarket/UI/StockMarketUI/node_modules/angular-datatables/src/angular-datatables.directive.js"],"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","Directive","ElementRef","Input","Renderer2","ViewContainerRef","Subject","i0","DataTableDirective","el","vcr","renderer","dtOptions","ngOnInit","_this","dtTrigger","subscribe","options","displayTable","ngOnDestroy","unsubscribe","dt","destroy","dtInstance","Promise","resolve","reject","then","resolvedDTOptions","isTableEmpty","Object","keys","$","nativeElement","setTimeout","rowCallback","row","data","index","columns","applyNgPipeTransform","applyNgRefTemplate","assign","DataTable","colsWithPipe","filter","x","ngPipeInstance","ngTemplateRef","forEach","pipe","pipeArgs","ngPipeArgs","findIndex","e","rowFromCol","childNodes","item","rowVal","text","rowValAfter","transform","apply","colsWithTemplate","_a","ref","context","cellFromIndex","html","_context","userData","adtData","instance","createEmbeddedView","appendChild","rootNodes","ɵfac","ɵdir","type","args","selector"],"mappings":"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","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * @license\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE\n */\nimport { Directive, ElementRef, Input, Renderer2, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nvar DataTableDirective = /** @class */ (function () {\n    function DataTableDirective(el, vcr, renderer) {\n        this.el = el;\n        this.vcr = vcr;\n        this.renderer = renderer;\n        /**\n         * The DataTable option you pass to configure your table.\n         */\n        this.dtOptions = {};\n    }\n    DataTableDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.dtTrigger) {\n            this.dtTrigger.subscribe(function (options) {\n                _this.displayTable(options);\n            });\n        }\n        else {\n            this.displayTable(null);\n        }\n    };\n    DataTableDirective.prototype.ngOnDestroy = function () {\n        if (this.dtTrigger) {\n            this.dtTrigger.unsubscribe();\n        }\n        if (this.dt) {\n            this.dt.destroy(true);\n        }\n    };\n    DataTableDirective.prototype.displayTable = function (dtOptions) {\n        var _this = this;\n        // assign new options if provided\n        if (dtOptions) {\n            this.dtOptions = dtOptions;\n        }\n        this.dtInstance = new Promise(function (resolve, reject) {\n            Promise.resolve(_this.dtOptions).then(function (resolvedDTOptions) {\n                // validate object\n                var isTableEmpty = Object.keys(resolvedDTOptions).length === 0 && $('tbody tr', _this.el.nativeElement).length === 0;\n                if (isTableEmpty) {\n                    reject('Both the table and dtOptions cannot be empty');\n                    return;\n                }\n                // Using setTimeout as a \"hack\" to be \"part\" of NgZone\n                setTimeout(function () {\n                    // Assign DT properties here\n                    var options = {\n                        rowCallback: function (row, data, index) {\n                            if (resolvedDTOptions.columns) {\n                                var columns = resolvedDTOptions.columns;\n                                _this.applyNgPipeTransform(row, columns);\n                                _this.applyNgRefTemplate(row, columns, data);\n                            }\n                            // run user specified row callback if provided.\n                            if (resolvedDTOptions.rowCallback) {\n                                resolvedDTOptions.rowCallback(row, data, index);\n                            }\n                        }\n                    };\n                    // merge user's config with ours\n                    options = Object.assign({}, resolvedDTOptions, options);\n                    _this.dt = $(_this.el.nativeElement).DataTable(options);\n                    resolve(_this.dt);\n                });\n            });\n        });\n    };\n    DataTableDirective.prototype.applyNgPipeTransform = function (row, columns) {\n        // Filter columns with pipe declared\n        var colsWithPipe = columns.filter(function (x) { return x.ngPipeInstance && !x.ngTemplateRef; });\n        colsWithPipe.forEach(function (el) {\n            var pipe = el.ngPipeInstance;\n            var pipeArgs = el.ngPipeArgs || [];\n            // find index of column using `data` attr\n            var i = columns.findIndex(function (e) { return e.data === el.data; });\n            // get <td> element which holds data using index\n            var rowFromCol = row.childNodes.item(i);\n            // Transform data with Pipe and PipeArgs\n            var rowVal = $(rowFromCol).text();\n            var rowValAfter = pipe.transform.apply(pipe, __spreadArray([rowVal], pipeArgs, false));\n            // Apply transformed string to <td>\n            $(rowFromCol).text(rowValAfter);\n        });\n    };\n    DataTableDirective.prototype.applyNgRefTemplate = function (row, columns, data) {\n        var _this = this;\n        // Filter columns using `ngTemplateRef`\n        var colsWithTemplate = columns.filter(function (x) { return x.ngTemplateRef && !x.ngPipeInstance; });\n        colsWithTemplate.forEach(function (el) {\n            var _a = el.ngTemplateRef, ref = _a.ref, context = _a.context;\n            // get <td> element which holds data using index\n            var i = columns.findIndex(function (e) { return e.data === el.data; });\n            var cellFromIndex = row.childNodes.item(i);\n            // reset cell before applying transform\n            $(cellFromIndex).html('');\n            // render onto DOM\n            // finalize context to be sent to user\n            var _context = Object.assign({}, context, context === null || context === void 0 ? void 0 : context.userData, {\n                adtData: data\n            });\n            var instance = _this.vcr.createEmbeddedView(ref, _context);\n            _this.renderer.appendChild(cellFromIndex, instance.rootNodes[0]);\n        });\n    };\n    DataTableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DataTableDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\n    DataTableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: DataTableDirective, selector: \"[datatable]\", inputs: { dtOptions: \"dtOptions\", dtTrigger: \"dtTrigger\" }, ngImport: i0 });\n    return DataTableDirective;\n}());\nexport { DataTableDirective };\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DataTableDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[datatable]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { dtOptions: [{\n                type: Input\n            }], dtTrigger: [{\n                type: Input\n            }] } });\n"]},"metadata":{},"sourceType":"module"}